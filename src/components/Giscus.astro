---
interface Props {
  giscusId: string
  giscusCategory: string
  giscusCategoryId: string
}

const {
  giscusId,
  giscusCategory,
  giscusCategoryId
} = Astro.props

const locale = Astro.currentLocale as string;

// 개발 환경 감지
const isDev = import.meta.env.DEV;

// URL 정규화 함수
const normalizeURL = (url: string) => {
  return url
    .replace(/\.mdx\/?/g, '/')
    .replace(/^\/(en|ko)\//, '/');
};

// 현재 URL 정규화
const currentURL = normalizeURL(Astro.url.pathname);
---

{!isDev && (
  <giscus-widget
    is:inline
    id={giscusId}
    repo="yeonjulee1005/dewdew-world"
    repoid="R_kgDOLF55BQ"
    category={giscusCategory}
    categoryid={giscusCategoryId}
    mapping="url"
    term={currentURL}
    strict="0"
    reactionsenabled="1"
    emitmetadata="0"
    inputposition="top"
    theme="light_protanopia"
    lang={locale}
    loading="eager"
    crossorigin="anonymous"
    async
    >
  </giscus-widget>
)}

{isDev && (
  <div class="p-4 border-2 border-dashed border-gray-300 rounded-lg text-center text-gray-500">
    <p>💬 댓글 기능</p>
    <p class="text-sm">개발 환경에서는 댓글이 표시되지 않습니다.</p>
    <p class="text-xs">배포 후 확인해주세요.</p>
  </div>
)}

<script>
  import 'giscus'
  
  const normalizeURL = () => {
    const originalURL = window.location.href;
    const cleanURL = originalURL
      .replace(/\.mdx\/?/g, '/')
      .replace(/^\/(en|ko)\//, '/');
    
    if (originalURL !== cleanURL) {
      window.history.replaceState({}, '', cleanURL);
    }
  };

  normalizeURL();
</script>